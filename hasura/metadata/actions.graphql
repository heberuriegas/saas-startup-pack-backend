type Mutation {
  create_direct_upload(
    object: CreateDirectUploadInput!
  ): CreateDirectUploadOutput
}

type Mutation {
  custom_update_users_by_pk(
    pk_columns: UpdateUserUsersPkColumnsInput!
    _set: UpdateUserUsersSetInput
  ): UpdateUserOutput
}

type Query {
  me: User
}

input SendOtpInput {
  phone_number: String!
  via: String!
  validation_hash: String
}

input CreateDirectUploadInput {
  filename: String!
  content_type: String!
  checksum: String!
  byte_size: Int!
}

input UpdateUserUsersSetInput {
  allow_password_change: Boolean
  confirmation_sent_at: timestamp
  confirmation_token: String
  confirmed_at: timestamp
  country_code: String
  created_at: timestamp
  email: String
  encrypted_password: String
  id: bigint
  image: String
  is_active: Boolean
  name: String
  otp_secret_key: String
  phone_number: String
  remember_created_at: timestamp
  reset_password_sent_at: timestamp
  reset_password_token: String
  role: String
  unconfirmed_email: String
  updated_at: timestamp
  username: String
}

input UpdateUserUsersPkColumnsInput {
  id: bigint!
}

type SendOtpOutput {
  success: String!
}

type CreateDirectUploadOutput {
  direct_upload: jsonb
}

type SampleOutput {
  accessToken: String!
}

type UpdateUserOutput {
  email: String
  id: bigint!
  name: String
  phone_number: String
  username: String
  avatar: jsonb
}

type UploadFileBlob {
  id: Int!
  key: String!
  filename: String!
  content_type: String!
  byte_size: Int!
  checksum: String!
  created_at: String!
}

type UploadFile {
  id: Int!
  url: String!
  medium_url: String
  thumbnail_url: String
  blob: UploadFileBlob
  created_at: String!
}

type User {
  id: Int!
  name: String
  username: String
  email: String
  phone_number: String
  avatar: UploadFile
  current_password_required: Boolean
  role: String
  created_at: String
  updated_at: String
}

type PossibleEvent {
  type: String!
  name: String!
  label: String!
}

type AasmField {
  id: Int!
  aasm_field: String!
  human_aasm_field: String!
  possible_events: [PossibleEvent]
}
